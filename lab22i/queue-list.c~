#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"
#include "queue.h"


typedef struct q_item *q_item;


struct q_item {
   q_item next;
   double item;
};
struct queue {
   q_item first;
   q_item last;
   int length;
};

queue queue_new() {
   queue result = emalloc(sizeof * result);
   result->first = NULL;
   result->last = NULL;
   result->length = 0;
   return result;
}
void enqueue(queue q, double item) {
   q_item i = emalloc(sizeof *i);
   i->item = item;
   i->next = NULL;
   if (q->length == 0) {
      q->first = i;
   } else {
      q->last->next = i;
   }
   q->last = i;
   q->length++;
}

double dequeue(queue q) {
   q_item node = q->first;
   if (q->length > 0){
      q->length--;
      q->first = node->next;
      return node->item;
   }
   return 0;
}
void queue_print(queue q) {
   int i = 0;
   q_item node = q->first;
   printf("%.2f\n", q->first->item);
   for (i = 1; i < q->length; i++){
      printf("%.2f\n", node->next->item);
      node = node->next;
   }
   /* print queue contents one per line to 2 decimal places */
}
void queue_print_info(queue q) {
   if (q->length == 0) {
      printf("The queue is empty\n");
   } else {
      printf("first %.2f, last %.2f, length %d\n", q->first->item,
             q->last->item, q->length);
   }
}
int queue_size(queue q) {
   return q->length;
}

queue queue_free(queue q) {
   int i = 0;
   q_item node1 = q->first;
   q_item node2 = q->first->next;
   free(q->first);
   for(i = 1; i < q->length; i++){
      node1 = node2;
      node2 = node2->next;
      free(node1);
   }
   free(q);
   return q;
}
